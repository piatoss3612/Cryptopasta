# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: "3.9"

services:
  server:
    container_name: server
    build:
      context: .
      target: final
      dockerfile: ./build/server/Dockerfile
    restart: "always"
    ports:
      - 8080:8080
    configs:
      - source: server-config
        target: /config.json
    depends_on:
      - mongo1
      - mongo2

  mongo1:
    container_name: mongo1
    image: mongo:latest
    restart: "always"
    command:
      [
        "--replSet",
        "rs0",
        "--bind_ip_all",
        "--port",
        "27017",
        "--keyFile",
        "/etc/mongodb/pki/keyfile",
      ]
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - ${PWD}/rs_keyfile:/etc/mongodb/pki/keyfile
      - mongo1-data:/data/db
      - mongo1-config:/data/configdb

  mongo2:
    container_name: mongo2
    restart: "always"
    image: mongo:latest
    command:
      [
        "--replSet",
        "rs0",
        "--bind_ip_all",
        "--port",
        "27018",
        "--keyFile",
        "/etc/mongodb/pki/keyfile",
      ]
    ports:
      - "27018:27018"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - ${PWD}/rs_keyfile:/etc/mongodb/pki/keyfile
      - mongo2-data:/data/db
      - mongo2-config:/data/configdb

  mongo-setup:
    container_name: mongo-setup
    image: mongo:latest
    depends_on:
      - mongo1
      - mongo2
    volumes:
      - ${PWD}/scripts:/scripts
    restart: "no"
    entrypoint: ["bash", "/scripts/mongo-rs-setup.sh"]

  swagger:
    container_name: swagger
    build:
      context: .
      target: final
      dockerfile: ./build/swagger/Dockerfile
    ports:
      - 1323:1323

volumes:
  mongo1-data:
  mongo1-config:
  mongo2-data:
  mongo2-config:

configs:
  server-config:
    file: ./config.json
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

