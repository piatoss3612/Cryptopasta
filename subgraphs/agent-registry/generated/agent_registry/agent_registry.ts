// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AgentRegistered extends ethereum.Event {
  get params(): AgentRegistered__Params {
    return new AgentRegistered__Params(this);
  }
}

export class AgentRegistered__Params {
  _event: AgentRegistered;

  constructor(event: AgentRegistered) {
    this._event = event;
  }

  get agent(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PortraitAdded extends ethereum.Event {
  get params(): PortraitAdded__Params {
    return new PortraitAdded__Params(this);
  }
}

export class PortraitAdded__Params {
  _event: PortraitAdded;

  constructor(event: PortraitAdded) {
    this._event = event;
  }

  get portraitId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get portrait(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class agent_registry__registerResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAccount(): Address {
    return this.value0;
  }

  getTokenId(): BigInt {
    return this.value1;
  }
}

export class agent_registry extends ethereum.SmartContract {
  static bind(address: Address): agent_registry {
    return new agent_registry("agent_registry", address);
  }

  AGENT_TOKEN(): Address {
    let result = super.call("AGENT_TOKEN", "AGENT_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_AGENT_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("AGENT_TOKEN", "AGENT_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  FACTORY(): Address {
    let result = super.call("FACTORY", "FACTORY():(address)", []);

    return result[0].toAddress();
  }

  try_FACTORY(): ethereum.CallResult<Address> {
    let result = super.tryCall("FACTORY", "FACTORY():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  accountToAgent(account: Address): Address {
    let result = super.call(
      "accountToAgent",
      "accountToAgent(address):(address)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toAddress();
  }

  try_accountToAgent(account: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "accountToAgent",
      "accountToAgent(address):(address)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  accountToTokenId(account: Address): BigInt {
    let result = super.call(
      "accountToTokenId",
      "accountToTokenId(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_accountToTokenId(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accountToTokenId",
      "accountToTokenId(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  agentToAccount(agent: Address): Address {
    let result = super.call(
      "agentToAccount",
      "agentToAccount(address):(address)",
      [ethereum.Value.fromAddress(agent)],
    );

    return result[0].toAddress();
  }

  try_agentToAccount(agent: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "agentToAccount",
      "agentToAccount(address):(address)",
      [ethereum.Value.fromAddress(agent)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isRegisteredAccount(account: Address): boolean {
    let result = super.call(
      "isRegisteredAccount",
      "isRegisteredAccount(address):(bool)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBoolean();
  }

  try_isRegisteredAccount(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRegisteredAccount",
      "isRegisteredAccount(address):(bool)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRegisteredAgent(agent: Address): boolean {
    let result = super.call(
      "isRegisteredAgent",
      "isRegisteredAgent(address):(bool)",
      [ethereum.Value.fromAddress(agent)],
    );

    return result[0].toBoolean();
  }

  try_isRegisteredAgent(agent: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRegisteredAgent",
      "isRegisteredAgent(address):(bool)",
      [ethereum.Value.fromAddress(agent)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  portrait(index: BigInt): string {
    let result = super.call("portrait", "portrait(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(index),
    ]);

    return result[0].toString();
  }

  try_portrait(index: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("portrait", "portrait(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(index),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  portraitCount(): BigInt {
    let result = super.call("portraitCount", "portraitCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_portraitCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "portraitCount",
      "portraitCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  register(agent: Address, portraitId: BigInt): agent_registry__registerResult {
    let result = super.call(
      "register",
      "register(address,uint256):(address,uint256)",
      [
        ethereum.Value.fromAddress(agent),
        ethereum.Value.fromUnsignedBigInt(portraitId),
      ],
    );

    return new agent_registry__registerResult(
      result[0].toAddress(),
      result[1].toBigInt(),
    );
  }

  try_register(
    agent: Address,
    portraitId: BigInt,
  ): ethereum.CallResult<agent_registry__registerResult> {
    let result = super.tryCall(
      "register",
      "register(address,uint256):(address,uint256)",
      [
        ethereum.Value.fromAddress(agent),
        ethereum.Value.fromUnsignedBigInt(portraitId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new agent_registry__registerResult(
        value[0].toAddress(),
        value[1].toBigInt(),
      ),
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenIdToAccount(tokenId: BigInt): Address {
    let result = super.call(
      "tokenIdToAccount",
      "tokenIdToAccount(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return result[0].toAddress();
  }

  try_tokenIdToAccount(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenIdToAccount",
      "tokenIdToAccount(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get portraits(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddPortraitCall extends ethereum.Call {
  get inputs(): AddPortraitCall__Inputs {
    return new AddPortraitCall__Inputs(this);
  }

  get outputs(): AddPortraitCall__Outputs {
    return new AddPortraitCall__Outputs(this);
  }
}

export class AddPortraitCall__Inputs {
  _call: AddPortraitCall;

  constructor(call: AddPortraitCall) {
    this._call = call;
  }

  get _portrait(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AddPortraitCall__Outputs {
  _call: AddPortraitCall;

  constructor(call: AddPortraitCall) {
    this._call = call;
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get agent(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get portraitId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
